name: Build

on:
  pull_request:  # Run on all branches.
  push:
    branches:
      - master
      - release
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  schedule:
    - cron: '0 2 * * *'  # Run at 2 AM UTC every day.
  workflow_dispatch:  # Allow manual triggering.

jobs:
  build-plugins:
    name: Build plugins for ${{ matrix.platform }}
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - ubuntu-22.04 # Plugins should only be built on Ubuntu 22.04.
          - macos-latest
          - windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Bazel
        uses: bazel-contrib/setup-bazel@0.15.0
        with:
          bazelisk-cache: true
          disk-cache: ${{ github.workflow }}
          repository-cache: true

      - name: Build plugins
        working-directory: plugins
        run: bazel build -c opt //:plugins

      - run: cp plugins/bazel-bin/plugins.tar.gz plugins/bazel-bin/plugins-${{ matrix.platform }}.tar.gz

      - uses: actions/upload-artifact@v4
        with:
          name: plugins-${{ matrix.platform }}
          path: plugins/bazel-bin/plugins-${{ matrix.platform }}.tar.gz

  csharp-lint:
    name: C# linting
    runs-on: ubuntu-latest
    env:
      UNITY_USERNAME: ${{ secrets.UNITY_USERNAME }}
      UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
    steps:
      - uses: actions/checkout@v4

      - name: Cache Unity Editor installation
        uses: actions/cache@v4
        with:
          path: .unity-editor
          key: unity-editor-${{ runner.os }}-${{ hashFiles('ProjectSettings/ProjectVersion.txt') }}
          restore-keys: |
            unity-editor-${{ runner.os }}-

      - name: Set up Unity (from ProjectVersion.txt)
        uses: buildalon/unity-setup@v1
        with:
          version-file: ProjectSettings/ProjectVersion.txt
          install-path: .unity-editor

      - name: Activate Unity License (Personal)
        if: ${{ env.UNITY_USERNAME != '' && env.UNITY_PASSWORD != '' }}
        uses: buildalon/activate-unity-license@v1
        with:
          username: ${{ env.UNITY_USERNAME }}
          password: ${{ env.UNITY_PASSWORD }}
          license: Personal

      - name: Generate .sln/.csproj via Unity (Rider SyncSolution)
        uses: buildalon/unity-action@v2
        with:
          project-path: .
          args: -quit -batchmode -nographics -projectPath . -executeMethod Packages.Rider.Editor.RiderScriptEditor.SyncSolution

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Build and check for warnings
        run: dotnet build micromissiles-unity.sln --configuration Debug -nologo

  build-all:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    needs:
      - build-plugins
      - csharp-lint
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneOSX # Build a macOS standalone (Intel 64-bit).
          - StandaloneWindows64 # Build a Windows 64-bit standalone.
          - StandaloneLinux64 # Build a Linux 64-bit standalone.
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}
          restore-keys: Library-

      - name: Download plugins
        uses: actions/download-artifact@v4
        with:
          path: Assets/Plugins
          merge-multiple: true

      - name: Extract plugins
        run: |
          cd Assets/Plugins
          find *.tar.gz -exec tar -xvzf {} \;
          rm plugins-*.tar.gz

      - uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          buildName: micromissiles-${{ github.ref_name }}-${{ matrix.targetPlatform }}
          versioning: Semantic
          targetPlatform: ${{ matrix.targetPlatform }}
          allowDirtyBuild: true

      - name: Copy tools directory
        run: |
          sudo cp -r Tools/ build/${{ matrix.targetPlatform }}/

      - if: matrix.targetPlatform == 'StandaloneWindows64'
        run: cd build/${{ matrix.targetPlatform }} && sudo zip -r ../build-${{ matrix.targetPlatform }}.zip * && cd -

      - if: matrix.targetPlatform == 'StandaloneWindows64'
        uses: actions/upload-artifact@v4
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: build/build-${{ matrix.targetPlatform }}.zip

      - if: matrix.targetPlatform == 'StandaloneOSX'
        run: sudo tar -czvf build/build-${{ matrix.targetPlatform }}.tar.gz -C build/${{ matrix.targetPlatform }} .

      - if: matrix.targetPlatform == 'StandaloneOSX'
        uses: actions/upload-artifact@v4
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: build/build-${{ matrix.targetPlatform }}.tar.gz

      - if: matrix.targetPlatform == 'StandaloneLinux64'
        run: sudo tar -czvf build/build-${{ matrix.targetPlatform }}.tar.gz -C build/${{ matrix.targetPlatform }} .

      - if: matrix.targetPlatform == 'StandaloneLinux64'
        uses: actions/upload-artifact@v4
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: build/build-${{ matrix.targetPlatform }}.tar.gz
