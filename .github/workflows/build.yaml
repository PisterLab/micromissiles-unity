name: Build

on:
  pull_request:  # Run on all branches.
  push:
    branches:
      - master
      - release
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  schedule:
    - cron: '0 2 * * *'  # Run at 2 AM UTC every day.
  workflow_dispatch:  # Allow manual triggering.

jobs:
  build-plugins:
    name: Build plugins for ${{ matrix.platform }}
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - ubuntu-22.04 # Plugins should only be built on Ubuntu 22.04.
          - macos-latest
          - windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Bazel
        uses: bazel-contrib/setup-bazel@0.15.0
        with:
          bazelisk-cache: true
          disk-cache: ${{ github.workflow }}
          repository-cache: true

      - name: Build plugins
        working-directory: plugins
        run: bazel build -c opt //:plugins

      - run: cp plugins/bazel-bin/plugins.tar.gz plugins/bazel-bin/plugins-${{ matrix.platform }}.tar.gz

      - uses: actions/upload-artifact@v4
        with:
          name: plugins-${{ matrix.platform }}
          path: plugins/bazel-bin/plugins-${{ matrix.platform }}.tar.gz

  # csharp-lint moved into Linux leg of build-all to reuse pulled Docker image.

  build-all:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    needs:
      - build-plugins
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneOSX # Build a macOS standalone (Intel 64-bit).
          - StandaloneWindows64 # Build a Windows 64-bit standalone.
          - StandaloneLinux64 # Build a Linux 64-bit standalone.
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}
          restore-keys: Library-

      - name: Download plugins
        uses: actions/download-artifact@v4
        with:
          path: Assets/Plugins
          merge-multiple: true

      - name: Extract plugins
        run: |
          cd Assets/Plugins
          find *.tar.gz -exec tar -xvzf {} \;
          rm plugins-*.tar.gz

      - name: Read Unity version (for Docker image tag)
        if: matrix.targetPlatform == 'StandaloneLinux64'
        id: unity_version
        run: |
          set -e
          ver=$(grep -E '^m_EditorVersion:' ProjectSettings/ProjectVersion.txt | awk '{print $2}')
          echo "version=$ver" >> "$GITHUB_OUTPUT"

      - name: Generate solution files for linting
        if: matrix.targetPlatform == 'StandaloneLinux64'
        env:
          UNITY_VERSION: ${{ steps.unity_version.outputs.version }}
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        run: |
          set -euo pipefail
          IMAGE="unityci/editor:ubuntu-${UNITY_VERSION}-linux-il2cpp-3"
          echo "Using image: $IMAGE"
          docker run --rm \
            -e UNITY_LICENSE \
            -e UNITY_EMAIL \
            -e UNITY_PASSWORD \
            -v "${GITHUB_WORKSPACE}:/workspace" \
            -w /workspace \
            "$IMAGE" \
            unity-editor -quit -batchmode -nographics -logFile /dev/stdout \
              -projectPath /workspace \
              -executeMethod Packages.Rider.Editor.RiderScriptEditor.SyncSolution

      - uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          buildName: micromissiles-${{ github.ref_name }}-${{ matrix.targetPlatform }}
          versioning: Semantic
          targetPlatform: ${{ matrix.targetPlatform }}
          allowDirtyBuild: true

      - name: Verify solution files exist
        if: matrix.targetPlatform == 'StandaloneLinux64'
        run: |
          set -euo pipefail
          ls -al *.sln *.csproj || true
          shopt -s nullglob
          SOLN=( *.sln )
          if [ ${#SOLN[@]} -eq 0 ]; then
            echo "::error::No .sln present after unity-builder" >&2
            exit 1
          fi
          echo "Found solution file(s): ${SOLN[@]}"

      - name: Run dotnet build (C# lint) inside unityci/editor
        if: matrix.targetPlatform == 'StandaloneLinux64'
        env:
          UNITY_VERSION: ${{ steps.unity_version.outputs.version }}
        run: |
          set -euo pipefail
          IMAGE="unityci/editor:ubuntu-${UNITY_VERSION}-linux-il2cpp-3"
          echo "Using image: $IMAGE"
          mkdir -p artifacts
          docker run --rm \
            -v "${GITHUB_WORKSPACE}:/workspace" \
            -w /workspace \
            "$IMAGE" \
            bash -c 'ls -la *.sln *.csproj; dotnet --info; dotnet build micromissiles-unity.sln --configuration Debug -nologo -warnaserror:"CS0168;CS0169;CS0219;CS0414;CS0649;CS8019;CS8321;IDE0005;IDE0051;IDE0052;IDE0059;IDE0060" -bl:artifacts/csharp-lint.binlog'

      - name: Upload lint binlog
        if: matrix.targetPlatform == 'StandaloneLinux64'
        uses: actions/upload-artifact@v4
        with:
          name: csharp-lint-binlog
          path: artifacts/csharp-lint.binlog

      - name: Package solution+projects from workspace
        if: matrix.targetPlatform == 'StandaloneLinux64'
        run: |
          set -euo pipefail
          mkdir -p artifacts
          tar -czf artifacts/unity-sln-and-projects.tgz *.sln *.csproj || {
            echo "::warning::No .csproj matched; continuing with .sln only"; \
            tar -czf artifacts/unity-sln-and-projects.tgz *.sln; }

      - name: Upload solution artifact
        if: matrix.targetPlatform == 'StandaloneLinux64'
        uses: actions/upload-artifact@v4
        with:
          name: unity-sln
          path: artifacts/unity-sln-and-projects.tgz
          if-no-files-found: error

      - name: Copy tools directory
        run: |
          sudo cp -r Tools/ build/${{ matrix.targetPlatform }}/

      - if: matrix.targetPlatform == 'StandaloneWindows64'
        run: cd build/${{ matrix.targetPlatform }} && sudo zip -r ../build-${{ matrix.targetPlatform }}.zip * && cd -

      - if: matrix.targetPlatform == 'StandaloneWindows64'
        uses: actions/upload-artifact@v4
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: build/build-${{ matrix.targetPlatform }}.zip

      - if: matrix.targetPlatform == 'StandaloneOSX'
        run: sudo tar -czvf build/build-${{ matrix.targetPlatform }}.tar.gz -C build/${{ matrix.targetPlatform }} .

      - if: matrix.targetPlatform == 'StandaloneOSX'
        uses: actions/upload-artifact@v4
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: build/build-${{ matrix.targetPlatform }}.tar.gz

      - if: matrix.targetPlatform == 'StandaloneLinux64'
        run: sudo tar -czvf build/build-${{ matrix.targetPlatform }}.tar.gz -C build/${{ matrix.targetPlatform }} .

      - if: matrix.targetPlatform == 'StandaloneLinux64'
        uses: actions/upload-artifact@v4
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: build/build-${{ matrix.targetPlatform }}.tar.gz
