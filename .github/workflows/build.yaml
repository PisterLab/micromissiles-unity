name: Build

on:
  pull_request:  # Run on all branches.
  push:
    branches:
      - master
      - release
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  schedule:
    - cron: '0 2 * * *'  # Run at 2 AM UTC every day.
  workflow_dispatch:  # Allow manual triggering.

jobs:
  build-plugins:
    name: Build plugins for ${{ matrix.platform }}
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - ubuntu-22.04 # Plugins should only be built on Ubuntu 22.04.
          - macos-latest
          - windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Bazel
        uses: bazel-contrib/setup-bazel@0.15.0
        with:
          bazelisk-cache: true
          disk-cache: ${{ github.workflow }}
          repository-cache: true

      - name: Build plugins
        working-directory: plugins
        run: bazel build -c opt //:plugins

      - run: cp plugins/bazel-bin/plugins.tar.gz plugins/bazel-bin/plugins-${{ matrix.platform }}.tar.gz

      - uses: actions/upload-artifact@v4
        with:
          name: plugins-${{ matrix.platform }}
          path: plugins/bazel-bin/plugins-${{ matrix.platform }}.tar.gz

  csharp-lint:
    name: C# Linting
    runs-on: ubuntu-latest
    needs:
      - build-plugins
    steps:
      - uses: actions/checkout@v4

      - name: Download plugins
        uses: actions/download-artifact@v4
        with:
          path: Assets/Plugins
          merge-multiple: true

      - name: Extract plugins
        run: |
          cd Assets/Plugins
          find *.tar.gz -exec tar -xvzf {} \;
          rm plugins-*.tar.gz

      - name: Read Unity version
        id: unity_version
        run: |
          set -e
          ver=$(grep -E '^m_EditorVersion:' ProjectSettings/ProjectVersion.txt | awk '{print $2}')
          echo "version=$ver" >> "$GITHUB_OUTPUT"

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Run Unity solution sync and dotnet build
        env:
          UNITY_VERSION: ${{ steps.unity_version.outputs.version }}
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
          UNITY_LICENSING_SERVER: ${{ secrets.UNITY_LICENSING_SERVER }}
        run: |
          set -euo pipefail
          IMAGE="unityci/editor:ubuntu-${UNITY_VERSION}-linux-il2cpp-3"
          mkdir -p artifacts
          docker run --rm \
            -e UNITY_LICENSE \
            -e UNITY_EMAIL \
            -e UNITY_PASSWORD \
            -e UNITY_SERIAL \
            -e UNITY_LICENSING_SERVER \
            -e GITHUB_WORKSPACE=/workspace \
            -e PROJECT_PATH=. \
            -e ARTIFACTS_PATH=/workspace/artifacts \
            -v "${GITHUB_WORKSPACE}:/workspace" \
            -v "/usr/share/dotnet:/usr/share/dotnet" \
            -e DOTNET_ROOT=/usr/share/dotnet \
            -w /workspace \
            "$IMAGE" \
            sh /workspace/Tools/ci/unity-generate-and-build.sh

      - name: Upload lint binlog
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: csharp-lint-binlog
          path: artifacts/csharp-lint.binlog

  build-all:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    needs:
      - build-plugins
      - csharp-lint
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneOSX # Build a macOS standalone (Intel 64-bit).
          - StandaloneWindows64 # Build a Windows 64-bit standalone.
          - StandaloneLinux64 # Build a Linux 64-bit standalone.
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}
          restore-keys: Library-

      - name: Download plugins
        uses: actions/download-artifact@v4
        with:
          path: Assets/Plugins
          merge-multiple: true

      - name: Extract plugins
        run: |
          cd Assets/Plugins
          find *.tar.gz -exec tar -xvzf {} \;
          rm plugins-*.tar.gz

      - uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          buildName: micromissiles-${{ github.ref_name }}-${{ matrix.targetPlatform }}
          versioning: Semantic
          targetPlatform: ${{ matrix.targetPlatform }}
          allowDirtyBuild: true

      - name: Copy tools directory
        run: |
          sudo cp -r Tools/ build/${{ matrix.targetPlatform }}/

      - if: matrix.targetPlatform == 'StandaloneWindows64'
        run: cd build/${{ matrix.targetPlatform }} && sudo zip -r ../build-${{ matrix.targetPlatform }}.zip * && cd -

      - if: matrix.targetPlatform == 'StandaloneWindows64'
        uses: actions/upload-artifact@v4
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: build/build-${{ matrix.targetPlatform }}.zip

      - if: matrix.targetPlatform == 'StandaloneOSX'
        run: sudo tar -czvf build/build-${{ matrix.targetPlatform }}.tar.gz -C build/${{ matrix.targetPlatform }} .

      - if: matrix.targetPlatform == 'StandaloneOSX'
        uses: actions/upload-artifact@v4
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: build/build-${{ matrix.targetPlatform }}.tar.gz

      - if: matrix.targetPlatform == 'StandaloneLinux64'
        run: sudo tar -czvf build/build-${{ matrix.targetPlatform }}.tar.gz -C build/${{ matrix.targetPlatform }} .

      - if: matrix.targetPlatform == 'StandaloneLinux64'
        uses: actions/upload-artifact@v4
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: build/build-${{ matrix.targetPlatform }}.tar.gz
