name: Build

on:
  pull_request:  # Run on all branches.
  push:
    branches:
      - master
      - release
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  schedule:
    - cron: '0 2 * * *'  # Run at 2 AM UTC every day.
  workflow_dispatch:  # Allow manual triggering.

jobs:
  build-plugins:
    name: Build plugins for ${{ matrix.platform }}
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - ubuntu-22.04 # Plugins should only be built on Ubuntu 22.04.
          - macos-latest
          - windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Bazel
        uses: bazel-contrib/setup-bazel@0.15.0
        with:
          bazelisk-cache: true
          disk-cache: ${{ github.workflow }}
          repository-cache: true

      - name: Build plugins
        working-directory: plugins
        run: bazel build -c opt //:plugins

      - run: cp plugins/bazel-bin/plugins.tar.gz plugins/bazel-bin/plugins-${{ matrix.platform }}.tar.gz

      - uses: actions/upload-artifact@v4
        with:
          name: plugins-${{ matrix.platform }}
          path: plugins/bazel-bin/plugins-${{ matrix.platform }}.tar.gz

  csharp-lint:
    name: C# Linting (Windows)
    runs-on: windows-2022
    needs:
      - build-plugins
    steps:
      - uses: actions/checkout@v4

      - name: Download plugins
        uses: actions/download-artifact@v4
        with:
          path: Assets/Plugins
          merge-multiple: true

      - name: Extract plugins
        shell: pwsh
        run: |
          Set-Location Assets/Plugins
          Get-ChildItem *.tar.gz | ForEach-Object {
            Write-Host "Extracting $($_.Name)"
            tar -xzf $_.FullName
            Remove-Item $_.FullName
          }

      - name: Read Unity version
        id: unity_version
        shell: pwsh
        run: |
          $match = Select-String -Path "ProjectSettings/ProjectVersion.txt" -Pattern '^m_EditorVersion:\s*(\S+)'
          if (-not $match) { throw "Unable to read Unity version from ProjectSettings/ProjectVersion.txt" }
          $version = $match.Matches[0].Groups[1].Value
          "version=$version" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          Write-Host "Detected Unity version: $version"

      - name: Install Unity Editor
        id: unity_setup
        uses: buildalon/unity-setup@v1
        with:
          version-file: ProjectSettings/ProjectVersion.txt
          unity-version: ${{ steps.unity_version.outputs.version }}
          build-targets: StandaloneWindows64

      - name: Record environment layout
        shell: pwsh
        run: |
          Write-Host "Workspace: $Env:GITHUB_WORKSPACE"
          Get-ChildItem $Env:GITHUB_WORKSPACE | ForEach-Object { Write-Host $_.FullName }
          Write-Host "UNITY_EDITOR_PATH: $Env:UNITY_EDITOR_PATH"
          Write-Host "UNITY_PROJECT_PATH: $Env:UNITY_PROJECT_PATH"

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Generate solution files with Unity
        id: unity_sync
        shell: pwsh
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
          UNITY_LICENSING_SERVER: ${{ secrets.UNITY_LICENSING_SERVER }}
        run: |
          $ErrorActionPreference = 'Stop'
          $logDir = Join-Path $Env:GITHUB_WORKSPACE "artifacts\windows"
          New-Item -ItemType Directory -Path $logDir -Force | Out-Null

          $unityPath = $Env:UNITY_EDITOR_PATH
          if (-not (Test-Path $unityPath)) {
            throw "Unity editor not found at '$unityPath'."
          }

          $syncLog = Join-Path $logDir "unity-generate.log"
          Write-Host "Invoking Unity at $unityPath to sync solutions..."
          & $unityPath `
            -logFile $syncLog `
            -quit -batchmode -nographics `
            -projectPath $Env:GITHUB_WORKSPACE `
            -executeMethod GenerateSolutionFiles.Generate
          $exitCode = $LASTEXITCODE
          Write-Host "Unity exited with code $exitCode"
          if ($exitCode -ne 0) {
            Get-Content $syncLog | Select-Object -Last 200
            throw "Unity solution generation failed with exit code $exitCode"
          }

          $slnScan = Join-Path $logDir "post-sync-solution-scan.txt"
          $csprojScan = Join-Path $logDir "post-sync-csproj-scan.txt"
          Get-ChildItem -Path $Env:GITHUB_WORKSPACE -Filter *.sln -Recurse | Sort-Object FullName | ForEach-Object { $_.FullName } | Out-File $slnScan -Encoding utf8
          Get-ChildItem -Path $Env:GITHUB_WORKSPACE -Filter *.csproj -Recurse | Sort-Object FullName | ForEach-Object { $_.FullName } | Out-File $csprojScan -Encoding utf8
          Write-Host "Post-sync solution files:"
          Get-Content $slnScan

      - name: Run dotnet build lint
        id: dotnet_build
        shell: pwsh
        env:
          DOTNET_WARN_AS_ERROR: CS0168;CS0169;CS0219;CS0414;CS0649;CS8019;CS8321;IDE0005;IDE0051;IDE0052;IDE0059;IDE0060
        run: |
          $ErrorActionPreference = 'Stop'
          $logDir = Join-Path $Env:GITHUB_WORKSPACE "artifacts\windows"
          New-Item -ItemType Directory -Path $logDir -Force | Out-Null
          $solution = Get-ChildItem -Path $Env:GITHUB_WORKSPACE -Filter *.sln -Recurse | Select-Object -First 1
          if (-not $solution) {
            throw "No solution file found before dotnet build."
          }
          Write-Host "Building solution: $($solution.FullName)"
          dotnet build $solution.FullName `
            --configuration Debug `
            -nologo `
            -warnaserror:$Env:DOTNET_WARN_AS_ERROR `
            -bl:"$(Join-Path $logDir 'csharp-lint.binlog')"

      - name: Run Unity edit mode tests
        if: always()
        id: unity_tests
        shell: pwsh
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
          UNITY_LICENSING_SERVER: ${{ secrets.UNITY_LICENSING_SERVER }}
        run: |
          $ErrorActionPreference = 'Stop'
          $logDir = Join-Path $Env:GITHUB_WORKSPACE "artifacts\windows"
          New-Item -ItemType Directory -Path $logDir -Force | Out-Null

          $unityPath = $Env:UNITY_EDITOR_PATH
          if (-not (Test-Path $unityPath)) {
            throw "Unity editor not found at '$unityPath'."
          }

          $testLog = Join-Path $logDir "unity-tests.log"
          $testResults = Join-Path $logDir "editmode-results.xml"
          Write-Host "Running Unity edit mode tests..."
          & $unityPath `
            -logFile $testLog `
            -quit -batchmode -nographics `
            -projectPath $Env:GITHUB_WORKSPACE `
            -runTests -testPlatform EditMode `
            -testResults $testResults
          $exitCode = $LASTEXITCODE
          Write-Host "Unity tests exited with code $exitCode"

          $slnScan = Join-Path $logDir "post-tests-solution-scan.txt"
          $csprojScan = Join-Path $logDir "post-tests-csproj-scan.txt"
          Get-ChildItem -Path $Env:GITHUB_WORKSPACE -Filter *.sln -Recurse | Sort-Object FullName | ForEach-Object { $_.FullName } | Out-File $slnScan -Encoding utf8
          Get-ChildItem -Path $Env:GITHUB_WORKSPACE -Filter *.csproj -Recurse | Sort-Object FullName | ForEach-Object { $_.FullName } | Out-File $csprojScan -Encoding utf8
          Write-Host "Post-test solution files:"
          Get-Content $slnScan

          if ($exitCode -ne 0) {
            Write-Warning "Unity tests returned non-zero exit code $exitCode"
            exit $exitCode
          }

      - name: Upload lint binlog
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: csharp-lint-windows-artifacts
          path: |
            artifacts/windows

  build-all:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    needs:
      - build-plugins
      - csharp-lint
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneOSX # Build a macOS standalone (Intel 64-bit).
          - StandaloneWindows64 # Build a Windows 64-bit standalone.
          - StandaloneLinux64 # Build a Linux 64-bit standalone.
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}
          restore-keys: Library-

      - name: Download plugins
        uses: actions/download-artifact@v4
        with:
          path: Assets/Plugins
          merge-multiple: true

      - name: Extract plugins
        run: |
          cd Assets/Plugins
          find *.tar.gz -exec tar -xvzf {} \;
          rm plugins-*.tar.gz

      - uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          buildName: micromissiles-${{ github.ref_name }}-${{ matrix.targetPlatform }}
          versioning: Semantic
          targetPlatform: ${{ matrix.targetPlatform }}
          allowDirtyBuild: true

      - name: Copy tools directory
        run: |
          sudo cp -r Tools/ build/${{ matrix.targetPlatform }}/

      - if: matrix.targetPlatform == 'StandaloneWindows64'
        run: cd build/${{ matrix.targetPlatform }} && sudo zip -r ../build-${{ matrix.targetPlatform }}.zip * && cd -

      - if: matrix.targetPlatform == 'StandaloneWindows64'
        uses: actions/upload-artifact@v4
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: build/build-${{ matrix.targetPlatform }}.zip

      - if: matrix.targetPlatform == 'StandaloneOSX'
        run: sudo tar -czvf build/build-${{ matrix.targetPlatform }}.tar.gz -C build/${{ matrix.targetPlatform }} .

      - if: matrix.targetPlatform == 'StandaloneOSX'
        uses: actions/upload-artifact@v4
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: build/build-${{ matrix.targetPlatform }}.tar.gz

      - if: matrix.targetPlatform == 'StandaloneLinux64'
        run: sudo tar -czvf build/build-${{ matrix.targetPlatform }}.tar.gz -C build/${{ matrix.targetPlatform }} .

      - if: matrix.targetPlatform == 'StandaloneLinux64'
        uses: actions/upload-artifact@v4
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: build/build-${{ matrix.targetPlatform }}.tar.gz
