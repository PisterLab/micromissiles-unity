name: Build

on:
  push:
    branches:
      - release
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches:
      - release
  schedule:
    - cron: '0 2 * * *'  # Run at 2 AM UTC every day.
  workflow_dispatch:

jobs:
  buildPlugins:
    name: Build plugins for ${{ matrix.platform }}
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - ubuntu-22.04 # Plugins should only be built on Ubuntu 22.04.
          - macos-latest
          - windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: false
      - uses: bazel-contrib/setup-bazel@0.14.0
        with:
          bazelisk-cache: true
          disk-cache: ${{ github.workflow }}
          repository-cache: true
      - name: Build plugins
        working-directory: plugins
        run: bazel build -c opt //:plugins
      - uses: actions/upload-artifact@v4
        with:
          name: plugins-${{ matrix.platform }}
          path: plugins/bazel-bin/plugins.tar.gz

  buildForAllSupportedPlatforms:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    needs: buildPlugins
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneOSX # Build a macOS standalone (Intel 64-bit).
          - StandaloneWindows64 # Build a Windows 64-bit standalone.
          - StandaloneLinux64 # Build a Linux 64-bit standalone.
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: false
      - uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}
          restore-keys: Library-
      - if: matrix.targetPlatform == 'Android'
        uses: jlumbroso/free-disk-space@v1.3.1
      - name: Download plugins
        uses: actions/download-artifact@v4
        with:
          path: Assets/Plugins
          pattern: plugins-*
          merge-multiple: true
      - name: Extract plugins
        run: |
          cd Assets/Plugins
          tar -xzvf plugins-*.tar.gz
          rm plugins-*.tar.gz
      - uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          buildName: micromissiles-${{ github.ref_name }}-${{ matrix.targetPlatform }}
          versioning: Semantic
          targetPlatform: ${{ matrix.targetPlatform }}
      - name: Copy tools directory
        run: |
          sudo cp -r Tools/ build/${{ matrix.targetPlatform }}/
      - if: matrix.targetPlatform == 'StandaloneWindows64'
        run: cd build/${{ matrix.targetPlatform }} && sudo zip -r ../build-${{ matrix.targetPlatform }}.zip * && cd -
      - if: matrix.targetPlatform == 'StandaloneWindows64'
        uses: actions/upload-artifact@v4
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: build/build-${{ matrix.targetPlatform }}.zip
      - if: matrix.targetPlatform == 'StandaloneOSX'
        run: sudo tar -czvf build/build-${{ matrix.targetPlatform }}.tar.gz -C build/${{ matrix.targetPlatform }} .
      - if: matrix.targetPlatform == 'StandaloneOSX'
        uses: actions/upload-artifact@v4
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: build/build-${{ matrix.targetPlatform }}.tar.gz
      - if: matrix.targetPlatform == 'StandaloneLinux64'
        run: sudo tar -czvf build/build-${{ matrix.targetPlatform }}.tar.gz -C build/${{ matrix.targetPlatform }} .
      - if: matrix.targetPlatform == 'StandaloneLinux64'
        uses: actions/upload-artifact@v4
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: build/build-${{ matrix.targetPlatform }}.tar.gz
