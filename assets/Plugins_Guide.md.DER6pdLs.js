import{_ as i,c as a,o as e,ah as t}from"./chunks/framework.B9LOIpO_.js";const g=JSON.parse('{"title":"Plugins Guide","description":"","frontmatter":{},"headers":[],"relativePath":"Plugins_Guide.md","filePath":"Plugins_Guide.md"}'),n={name:"Plugins_Guide.md"};function l(h,s,p,r,d,k){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="plugins-guide" tabindex="-1">Plugins Guide <a class="header-anchor" href="#plugins-guide" aria-label="Permalink to “Plugins Guide”">​</a></h1><p>This guide explains how to build and develop the C++ plugins that provide core functionality for the micromissiles simulator and allow C++ code to be executed within Unity.</p><h2 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to “Prerequisites”">​</a></h2><ul><li>A C++ compiler (GCC, Clang, or MSVC)</li><li>Git</li><li>Python (for Bazel)</li><li>Bazel 8 (or Bazelisk)</li></ul><h2 id="installing-bazel" tabindex="-1">Installing Bazel <a class="header-anchor" href="#installing-bazel" aria-label="Permalink to “Installing Bazel”">​</a></h2><p>This project requires Bazel version 8.</p><p>For detailed installation instructions for your platform (Windows, macOS, Linux), please refer to the <a href="https://bazel.build/install" target="_blank" rel="noreferrer">official Bazel documentation</a>.</p><p>A few important notes:</p><ul><li>Bazelisk is recommended as it automatically manages Bazel versions based on the <code>.bazelversion</code> file.</li><li>On Windows, you will need additional components like MSYS2 and Visual Studio Build Tools.</li><li>You can verify your installation with <code>bazel version</code>.</li></ul><h2 id="building-the-plugins" tabindex="-1">Building the Plugins <a class="header-anchor" href="#building-the-plugins" aria-label="Permalink to “Building the Plugins”">​</a></h2><ol><li><p>Change into the <code>plugins</code> directory.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> plugins</span></span></code></pre></div></li><li><p>Build all plugins:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bazel</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> //...</span></span></code></pre></div></li><li><p>Build specific plugins:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Build the assignment plugin.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bazel</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> //:assignment</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Build the example plugin.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bazel</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> //:example</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Build and package all plugins into a tarball.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bazel</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> //:plugins</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Build and package all plugins into a tarball with optimization enabled.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bazel</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> opt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> //:plugins</span></span></code></pre></div><p>After building, the compiled shared libraries can be found in the <code>bazel-bin</code> directory. The packaged plugins tarball are located at <code>bazel-bin/plugins.tar.gz</code>.</p></li><li><p>Run tests:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bazel</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> //...</span></span></code></pre></div></li></ol><h2 id="integrating-with-unity" tabindex="-1">Integrating with Unity <a class="header-anchor" href="#integrating-with-unity" aria-label="Permalink to “Integrating with Unity”">​</a></h2><p>To use these plugins with the Unity project:</p><ol><li>Build the plugins using the instructions above. Ensure that you have optimization enabled to reduce the shared library size.</li><li>Extract the contents of <code>bazel-bin/plugins.tar.gz</code>.</li><li>Copy the shared libraries (<code>.dll</code>, <code>.dylib</code>, or <code>.so</code> files) to the appropriate plugins directory in the Unity project.</li></ol><h3 id="ubuntu-compatibility" tabindex="-1">Ubuntu Compatibility <a class="header-anchor" href="#ubuntu-compatibility" aria-label="Permalink to “Ubuntu Compatibility”">​</a></h3><p>Ensure that the plugin is compiled on the same Ubuntu version (e.g., 2022.04) on which the Unity project will run to maintain compability with the <code>glibc</code> and <code>libstdc++</code> standard libraries. Unity will fail load the plugin if the plugin was compiled against a newer version of <code>glibc</code> or <code>libstdc++</code> that is not present on the current system.</p><p>Currently, the plugin is compatible with Ubuntu 22.04 or newer.</p><h2 id="development" tabindex="-1">Development <a class="header-anchor" href="#development" aria-label="Permalink to “Development”">​</a></h2><h3 id="project-structure" tabindex="-1">Project Structure <a class="header-anchor" href="#project-structure" aria-label="Permalink to “Project Structure”">​</a></h3><p>All plugin-related code can be found under the <code>plugins/</code> directory. Currently, there are two plugins:</p><ul><li><code>assignment/</code>: Implements different assignment algorithms using Google&#39;s OR-Tools library to assign interceptors to threats.</li><li><code>protobuf/</code>: Implements loading Protobuf messages from Protobuf text files.</li></ul><p>Other useful code can be found in the other directories:</p><ul><li><code>base/</code>: Common base utilities.</li><li><code>example/</code>: Contains an example plugin implementation.</li><li><code>experimental/</code>: Experimental code, including toy examples to demonstrate various packages.</li></ul><h3 id="status-codes" tabindex="-1">Status Codes <a class="header-anchor" href="#status-codes" aria-label="Permalink to “Status Codes”">​</a></h3><p>Plugins should never throw exceptions as these cannot be caught by Unity and will cause the simulation to crash. Instead, plugins should always return a status code that Unity can check and handle appropriately.</p><p>The complete list of status codes is defined in <a href="https://github.com/PisterLab/micromissiles-unity/blob/master/Assets/Proto/Plugin/status.proto" target="_blank" rel="noreferrer"><code>status.proto</code></a> and is adapted from <a href="https://github.com/abseil/abseil-cpp/blob/master/absl/status/status.h" target="_blank" rel="noreferrer">Google&#39;s Abseil status codes</a>. Defining a Protobuf enumeration for status codes allows both the C++ plugins and the Unity C# code to reference the same set of values.</p><p>The most common status codes are given in the table below:</p><table tabindex="0"><thead><tr><th><strong>Status Code</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td><code>STATUS_OK</code></td><td>Returned on success and indicates no error.</td></tr><tr><td><code>STATUS_INVALID_ARGUMENT</code></td><td>Returned when an invalid argument was specified.</td></tr><tr><td><code>STATUS_NOT_FOUND</code></td><td>Returned when a resource was not found.</td></tr><tr><td><code>STATUS_FAILED_PRECONDITION</code></td><td>Returned when the arguments are valid but an invariant has not been satisfied.</td></tr><tr><td><code>STATUS_OUT_OF_RANGE</code></td><td>Returned when a resource was accessed past its valid range.</td></tr><tr><td><code>STATUS_UNIMPLEMENTED</code></td><td>Returned when the operation has not been implemented.</td></tr><tr><td><code>STATUS_INTERNAL</code></td><td>Returned when an internal error occurred during the operation.</td></tr></tbody></table><p>For more details on the meaning and usage of each status code, refer to the <a href="https://github.com/abseil/abseil-cpp/blob/master/absl/status/status.h" target="_blank" rel="noreferrer">Abseil status documentation</a>.</p><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to “Example”">​</a></h3><p>Because plugins are designed to return a status code rather than throw exceptions, they rely on output arguments to pass data back to Unity. For example, the <code>Assignment</code> plugin exposes the following C API for performing an even assignment:</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Assign the agents to the tasks using an even assignment.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StatusCode</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Assignment_EvenAssignment_Assign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> num_agents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> num_tasks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> float*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> costs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> assigned_agents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> assigned_tasks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> num_assignments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>The corresponding Unity C# declaration is:</p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Assign the agents to the tasks using an even assignment.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DllImport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;assignment&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extern</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StatusCode</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Assignment_EvenAssignment_Assign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> numAgents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> numTasks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">costs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assignedAgents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assignedTasks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> numAssignments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>In this example:</p><ul><li><code>costs</code> is a float array passed from Unity to the plugin.</li><li><code>assigned_agents</code>/<code>assignedAgents</code> and <code>assigned_tasks</code>/<code>assignedTasks</code> are integer arrays used as output arguments.</li><li><code>num_assignments</code>/<code>numAssignments</code> is an integer output argument of the plugin.</li></ul><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Solve the assignment problem.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assignedInterceptorIndices</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[assignableInterceptors.Count];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assignedThreatIndices</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[assignableInterceptors.Count];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> numAssignments</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StatusCode</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> status</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Assignment.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Assignment_EvenAssignment_Assign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    assignableInterceptors.Count, activeThreats.Count, assignmentCosts,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    assignedInterceptorIndices, assignedThreatIndices, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numAssignments);</span></span></code></pre></div><p>After the call, the returned status code should always be checked and logged if necessary.</p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Plugin.StatusCode.StatusOk) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Debug.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$&quot;Failed to assign the interceptors to the threats with status code {</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> assignments;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,39)]))}const c=i(n,[["render",l]]);export{g as __pageData,c as default};
