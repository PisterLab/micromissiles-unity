import{_ as a,c as e,a2 as s,o as l}from"./chunks/framework.DYF6f1aH.js";const c=JSON.parse('{"title":"C++ Plugins Guide","description":"","frontmatter":{},"headers":[],"relativePath":"Cpp_Plugins_Guide.md","filePath":"Cpp_Plugins_Guide.md"}'),t={name:"Cpp_Plugins_Guide.md"};function n(p,i,o,h,r,d){return l(),e("div",null,i[0]||(i[0]=[s(`<h1 id="c-plugins-guide" tabindex="-1">C++ Plugins Guide <a class="header-anchor" href="#c-plugins-guide" aria-label="Permalink to &quot;C++ Plugins Guide&quot;">​</a></h1><p>This guide explains how to build and develop the C++ plugins that provide core functionality for the micromissiles simulator.</p><h2 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">​</a></h2><ul><li>A C++ compiler (GCC, Clang, or MSVC)</li><li>Git</li><li>Python (for Bazel)</li><li>Bazel 8 (or Bazelisk)</li></ul><h2 id="installing-bazel" tabindex="-1">Installing Bazel <a class="header-anchor" href="#installing-bazel" aria-label="Permalink to &quot;Installing Bazel&quot;">​</a></h2><p>This project requires Bazel version 8.</p><p>For detailed installation instructions for your platform (Windows, macOS, Linux), please refer to the <a href="https://bazel.build/install" target="_blank" rel="noreferrer">official Bazel documentation</a>.</p><p>A few important notes:</p><ul><li>Bazelisk is recommended as it automatically manages Bazel versions based on the <code>.bazelversion</code> file.</li><li>On Windows, you will need additional components like MSYS2 and Visual Studio Build Tools.</li><li>You can verify your installation with <code>bazel version</code>.</li></ul><h2 id="building-the-plugins" tabindex="-1">Building the Plugins <a class="header-anchor" href="#building-the-plugins" aria-label="Permalink to &quot;Building the Plugins&quot;">​</a></h2><ol><li><p>Change into the <code>plugins</code> directory.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> plugins</span></span></code></pre></div></li><li><p>Build all plugins:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bazel</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> //...</span></span></code></pre></div></li><li><p>Build specific plugins:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Build the assignment plugin.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bazel</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> //:assignment</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Build the example plugin.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bazel</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> //:example</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Build and package all plugins into a tarball.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bazel</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> //:plugins</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Build and package all plugins into a tarball with optimization enabled.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bazel</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> opt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> //:plugins</span></span></code></pre></div></li><li><p>Run tests:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bazel</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> //...</span></span></code></pre></div></li></ol><h2 id="project-structure" tabindex="-1">Project Structure <a class="header-anchor" href="#project-structure" aria-label="Permalink to &quot;Project Structure&quot;">​</a></h2><ul><li><code>/assignment</code>: Contains the assignment plugin implementation.</li><li><code>/example</code>: Contains an example plugin implementation.</li><li><code>/base</code>: Common base utilities.</li></ul><h2 id="output-files" tabindex="-1">Output Files <a class="header-anchor" href="#output-files" aria-label="Permalink to &quot;Output Files&quot;">​</a></h2><p>After building, the compiled shared libraries can be found in the <code>bazel-bin</code> directory. The packaged plugins tarball will be at <code>bazel-bin/plugins.tar.gz</code>.</p><h2 id="integrating-with-unity" tabindex="-1">Integrating with Unity <a class="header-anchor" href="#integrating-with-unity" aria-label="Permalink to &quot;Integrating with Unity&quot;">​</a></h2><p>To use these plugins with the micromissiles Unity project:</p><ol><li>Build the plugins using the instructions above. Ensure that you have optimization enabled to reduce the shared library size.</li><li>Extract the contents of <code>bazel-bin/plugins.tar.gz</code>.</li><li>Copy the shared libraries (<code>.dll</code>, <code>.dylib</code>, or <code>.so</code> files) to the appropriate plugins directory in the Unity project.</li></ol><h3 id="ubuntu-compatibility" tabindex="-1">Ubuntu Compatibility <a class="header-anchor" href="#ubuntu-compatibility" aria-label="Permalink to &quot;Ubuntu Compatibility&quot;">​</a></h3><p>Ensure that the plugin is compiled on the same Ubuntu version (e.g., 2022.04) on which the Unity project will run to maintain compability with the <code>glibc</code> and <code>libstdc++</code> standard libraries. Unity will fail load the plugin if the plugin was compiled against a newer version of <code>glibc</code> or <code>libstdc++</code> that is not present on the current system.</p><p>Currently, the plugin is compatible with Ubuntu 22.04 or newer.</p>`,21)]))}const g=a(t,[["render",n]]);export{c as __pageData,g as default};
